Q.1. College Admission System
Schema:
● Student(sid INT, name VARCHAR(50), gender VARCHAR(10), dept_id INT)
● Department(dept_id INT, dept_name VARCHAR(50), intake INT)
Questions:
1. Create tables with appropriate keys and constraints.
2. Add 5 students and 3 departments.
3. Display names of all male students and their department names.
4. List departments with more than 2 students using GROUP BY and HAVING.
5. Update the intake to increase by 10% for all departments

1. CREATE TABLE Department (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50) NOT NULL,
    intake INT NOT NULL);

   CREATE TABLE Student (
    sid INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    gender VARCHAR(10) CHECK (gender IN ('Male', 'Female')),
    dept_id INT,
    FOREIGN KEY (dept_id) REFERENCES Department(dept_id));

2.  INSERT INTO Student (sid, name, gender, dept_id) VALUES
       (101, 'Arjun Mehta', 'Male', 1),
       (102, 'Sneha Roy', 'Female', 2),
       (103, 'Rahul Verma', 'Male', 1),
       (104, 'Priya Singh', 'Female', 3),
       (105, 'Rohan Das', 'Male', 2);

    INSERT INTO Department (dept_id, dept_name, intake) VALUES
       (1, 'Computer Science', 60),
       (2, 'Electrical Engineering', 50),
       (3, 'Mechanical Engineering', 40);

3.  CREATE VIEW male_students AS
     SELECT s.name, d.dept_name FROM Student s JOIN Department d ON s.dept_id = d.dept_id WHERE s.gender = "Male";

    SELECT * FROM male_students;

4.  SELECT d.dept_name FROM Department d JOIN Student s ON s.dept_id = d.dept_id GROUP BY d.dept_id  HAVING COUNT(d.dept_id)>=2;

5.  UPDATE Department SET intake = intake + (intake * 0.1);

Q.2. Online Retail Store
Schema:
● Customers(cust_id INT, name VARCHAR(50), city VARCHAR(30))
● Orders(order_id INT, cust_id INT, amount DECIMAL(10,2), order_date DATE)
Questions:
1. Create both tables with appropriate constraints.
2. Insert at least 4 customers and 5 orders.
3. Display customer names who placed orders above ₹5000.
4. List total order amount placed by each customer in descending order.
5. Retrieve customers who haven’t placed any orders.

1.  CREATE TABLE Customers (
      cust_id INT PRIMARY KEY,
      name VARCHAR(50) NOT NULL,
      city VARCHAR(30)
    );

  CREATE TABLE Orders (
      order_id INT PRIMARY KEY,
      cust_id INT,
      amount DECIMAL(10,2) NOT NULL CHECK (amount >= 0),
      order_date DATE,
      FOREIGN KEY (cust_id) REFERENCES Customers(cust_id)
  );

2. -- Inserting customers
  INSERT INTO Customers (cust_id, name, city) VALUES
  (1, 'Amit Sharma', 'Delhi'),
  (2, 'Priya Desai', 'Mumbai'),
  (3, 'Rakesh Gupta', 'Bangalore'),
  (4, 'Neha Mehra', 'Pune');

  -- Inserting orders
  INSERT INTO Orders (order_id, cust_id, amount, order_date) VALUES
  (101, 1, 7500.00, '2025-04-01'),
  (102, 2, 4200.00, '2025-04-02'),
  (103, 1, 2300.00, '2025-04-03'),
  (104, 3, 5100.00, '2025-04-04'),
  (105, 2, 1900.00, '2025-04-05');
    
3.  SELECT c.name, o.amount FROM Customers c JOIN Orders o ON o.cust_id = c.cust_id WHERE o.amount > 5000;

4.  SELECT c.name, SUM(o.amount) FROM Customers c JOIN Orders o ON o.cust_id = c.cust_id GROUP BY (o.cust_id) ORDER BY SUM(o.amount)  DESC;

5.  SELECT c.name FROM Customers c LEFT JOIN Orders o ON o.cust_id = c.cust_id WHERE o.order_id IS NULL;

Q.3. Bookstore Inventory
Schema:
● Books(book_id INT, title VARCHAR(100), price DECIMAL(8,2), pub_year INT)
● Sales(sale_id INT, book_id INT, quantity INT, sale_date DATE)
Questions:
1. Create tables with suitable constraints.
2. Insert 4 books and 5 sales records.
3. Display titles of books sold in the year 2024.
4. Show total sales revenue for each book using SUM(price * quantity).
5. Find the title of the most sold book using ORDER BY and LIMIT.

1.  CREATE TABLE Books (
      book_id INT PRIMARY KEY,
      title VARCHAR(100) NOT NULL,
      price DECIMAL(8,2) NOT NULL CHECK (price >= 0),
      pub_year INT CHECK (pub_year BETWEEN 1000 AND 9999)
    );

    CREATE TABLE Sales (
      sale_id INT PRIMARY KEY,
      book_id INT,
      quantity INT NOT NULL CHECK (quantity > 0),
      sale_date DATE NOT NULL,
      FOREIGN KEY (book_id) REFERENCES Books(book_id)
    );

2.  -- Insert books
    INSERT INTO Books (book_id, title, price, pub_year) VALUES
    (1, 'The Alchemist', 299.99, 1993),
    (2, 'Atomic Habits', 499.50, 2018),
    (3, 'Sapiens', 699.00, 2011),
    (4, 'Ikigai', 350.00, 2016);

    -- Insert sales
    INSERT INTO Sales (sale_id, book_id, quantity, sale_date) VALUES
    (101, 1, 3, '2024-01-15'),
    (102, 2, 2, '2023-11-10'),
    (103, 3, 5, '2024-03-05'),
    (104, 4, 1, '2024-07-22'),
    (105, 1, 4, '2025-02-01');

3.  SELECT b.title, s.sale_date FROM Books b JOIN Sales s ON b.book_id = s.book_id WHERE YEAR(s.sale_date) = 2024;

4.  SELECT b.title , SUM(b.price * s.quantity) FROM Books b JOIN Sales s ON s.book_id = b.book_id GROUP BY b.title;

5.  SELECT b.title , SUM(s.quantity) FROM Books b JOIN Sales s ON s.book_id = b.book_id GROUP BY s.book_id ORDER BY SUM(s.quantity) DESC LIMIT 1;

Q.4. Airline Reservation
Schema:
● Flights(flight_id INT, source VARCHAR(30), destination VARCHAR(30), fare DECIMAL(6,2))
● Passengers(pid INT, name VARCHAR(50), flight_id INT, travel_date DATE)
Questions:
1. Create both tables with constraints.
2. Insert 3 flights and 5 passenger bookings.
3. List all passengers travelling to ‘Delhi’.
4. Show flight-wise passenger count.
5. Increase fare by 10% for flights having more than 2 bookings.

1.  CREATE TABLE Flights (
      flight_id INT PRIMARY KEY,
      source VARCHAR(30) NOT NULL,
      destination VARCHAR(30) NOT NULL,
      fare DECIMAL(6,2) NOT NULL CHECK (fare >= 0)
    );

    CREATE TABLE Passengers (
      pid INT PRIMARY KEY,
      name VARCHAR(50) NOT NULL,
      flight_id INT,
      travel_date DATE NOT NULL,
      FOREIGN KEY (flight_id) REFERENCES Flights(flight_id)
    );

2.  -- Insert flights
    INSERT INTO Flights (flight_id, source, destination, fare) VALUES
    (101, 'Mumbai', 'Delhi', 3500.00),
    (102, 'Chennai', 'Bangalore', 2000.00),
    (103, 'Kolkata', 'Delhi', 4000.00);

    -- Insert passengers
    INSERT INTO Passengers (pid, name, flight_id, travel_date) VALUES
    (1, 'Aarav Mehta', 101, '2025-05-01'),
    (2, 'Isha Reddy', 102, '2025-05-02'),
    (3, 'Kabir Khan', 103, '2025-05-03'),
    (4, 'Sneha Roy', 101, '2025-05-04'),
    (5, 'Rohan Patel', 101, '2025-05-05');

3.  SELECT p.name FROM passengers p JOIN flights f ON f.flight_id = p.flight_id WHERE f.destination = "Delhi";

4.  SELECT f.flight_id, COUNT(p.flight_id) FROM flights f JOIN passengers p ON p.flight_id = f.flight_id GROUP BY p.flight_id;

5.   UPDATE flights SET fare = fare + (fare * 0.1) WHERE flight_id IN (SELECT p2.flight_id FROM passengers p2 GROUP BY p2.flight_id HAVING COUNT(p2.flight_id)>2);

Q.5. Employee Performance Tracker
Schema:
● Employee(emp_id INT, name VARCHAR(50), designation VARCHAR(30), salary INT)
● Performance(emp_id INT, month VARCHAR(15), rating INT)
Questions:
1. Create schema and insert sample data.
2. Find employees with average rating > 4.
3. Display highest rated employee each month.
4. List employees who never received a rating using NOT IN.
5. Display total salary to be paid for ‘Manager’ designation employees.

1.  -- Create tables
    CREATE TABLE Employee (
      emp_id INT PRIMARY KEY,
      name VARCHAR(50) NOT NULL,
      designation VARCHAR(30) NOT NULL,
      salary INT NOT NULL CHECK (salary >= 0)
    );

    CREATE TABLE Performance (
      emp_id INT,
      month VARCHAR(15),
      rating INT CHECK (rating BETWEEN 1 AND 5),
      FOREIGN KEY (emp_id) REFERENCES Employee(emp_id)
    );

    -- Insert sample employees
    INSERT INTO Employee (emp_id, name, designation, salary) VALUES
    (1, 'Amit Shah', 'Manager', 80000),
    (2, 'Sneha Verma', 'Developer', 60000),
    (3, 'Ravi Kumar', 'Manager', 85000),
    (4, 'Isha Nair', 'Tester', 50000),
    (5, 'Karan Malhotra', 'Developer', 62000);

    -- Insert sample performance ratings
    INSERT INTO Performance (emp_id, month, rating) VALUES
    (1, 'January', 5),
    (2, 'January', 4),
    (3, 'January', 5),
    (2, 'February', 5),
    (3, 'February', 3),
    (4, 'January', 2),
    (1, 'February', 5);

2.  SELECT e.name, p.rating FROM Employee e JOIN Performance p ON p.emp_id = e.emp_id WHERE p.rating>4;

3.  SELECT e.name, p.month, p.rating
    FROM Performance p
    JOIN Employee e ON p.emp_id = e.emp_id
    WHERE (p.month, p.rating) IN (
      SELECT month, MAX(rating)
      FROM Performance
      GROUP BY month
    );

4.  SELECT e.name FROM Employee e LEFT JOIN Performance p ON p.emp_id = e.emp_id WHERE p.rating IS NULL;

5.  SELECT SUM(e.salary) as TotalSalary FROM Employee e WHERE e.designation = "Manager";
  

Procedure 1 : 
1.  A company wants to give a bonus of ₹5000 to employees whose salaries are less than ₹30,000. The
HR department maintains a database of employee records.
Schema:
● Employees(emp_id INT PRIMARY KEY, name VARCHAR(50), salary INT, bonus INT DEFAULT 0)
Tasks:
1.Write a stored procedure using a cursor that:
● Retrieves all employees with salary < ₹30,000
● Adds ₹5000 to their bonus column
● Displays their name and updated bonus value

DELIMITER $$

CREATE PROCEDURE UpdateLowSalaryBonuses()
BEGIN
    -- Declare variables
    DECLARE done INT DEFAULT FALSE;
    DECLARE empName VARCHAR(50);
    DECLARE empId INT;
    DECLARE empBonus INT;

    -- Cursor for employees with salary < 30000
    DECLARE cur CURSOR FOR 
        SELECT emp_id, name, bonus 
        FROM Employees 
        WHERE salary < 30000;

    -- Declare NOT FOUND handler
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open the cursor
    OPEN cur;

    -- Cursor loop
    read_loop: LOOP
        FETCH cur INTO empId, empName, empBonus;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Update bonus in the table
        UPDATE Employees
        SET bonus = empBonus + 5000
        WHERE emp_id = empId;

        -- Display the result
        SELECT empName AS name, empBonus + 5000 AS updated_bonus;
    END LOOP;

    -- Close the cursor
    CLOSE cur;
END$$

DELIMITER ;

Procedure 2 :
2. A library tracks borrowed books and their return status. A fine of ₹2 is applied for each day after
the due date.
Schema:
● Borrowers(borrow_id INT PRIMARY KEY, student_name VARCHAR(50), due_date DATE,
return_date DATE, fine INT DEFAULT 0)
Task:
Write a stored procedure using a cursor to:
● Loop through all records in Borrowers
● For each student who returned the book late, calculate the number of overdue days
● Multiply overdue days by ₹2 and update the fine column
● Show a message like: Fine of ₹20 updated for Rahul Singh

DELIMITER $$

CREATE PROCEDURE UpdateFines()
BEGIN
    -- Declare variables
    DECLARE done INT DEFAULT FALSE;
    DECLARE b_id INT;
    DECLARE student VARCHAR(50);
    DECLARE due DATE;
    DECLARE ret DATE;
    DECLARE overdue_days INT;
    DECLARE fine_amt INT;

    -- Cursor to fetch all rows
    DECLARE cur CURSOR FOR 
        SELECT borrow_id, student_name, due_date, return_date
        FROM Borrowers;

    -- Handler for end of data
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open the cursor
    OPEN cur;

    -- Loop through each record
    read_loop: LOOP
        FETCH cur INTO b_id, student, due, ret;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Check if the book is returned late
        IF ret > due THEN
            SET overdue_days = DATEDIFF(ret, due);
            SET fine_amt = overdue_days * 2;

            -- Update the fine column
            UPDATE Borrowers
            SET fine = fine_amt
            WHERE borrow_id = b_id;

            -- Show the message
            SELECT CONCAT('Fine of ₹', fine_amt, ' updated for ', student) AS message;
        END IF;
    END LOOP;

    -- Close the cursor
    CLOSE cur;
END$$

DELIMITER ;

Trigger : 
1: Track Salary Updates
Context:
A company wants to maintain a log of all salary changes for employees. Every time an employee’s
salary is updated, the old and new values should be stored in a separate table for audit purposes.
Tables:
● employees(emp_id INT PRIMARY KEY, name VARCHAR(50), salary DECIMAL(10,2))
● salary_log(log_id INT AUTO_INCREMENT PRIMARY KEY, emp_id INT, old_salary
DECIMAL(10,2), new_salary DECIMAL(10,2), change_date TIMESTAMP DEFAULT
CURRENT_TIMESTAMP)
Objective:
Create a BEFORE UPDATE trigger on the employees table that:
● Captures the old and new salary values whenever salary is updated
● Inserts them into the salary_log table
Problem statements based on MongoDB
Student Performance Tracker
Context:
A university wants to track students' marks across various

DELIMITER $$

CREATE TRIGGER before_salary_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    -- Check if the salary is actually changing
    IF OLD.salary <> NEW.salary THEN
        -- Insert old and new salary values into salary_log
        INSERT INTO salary_log(emp_id, old_salary, new_salary)
        VALUES (OLD.emp_id, OLD.salary, NEW.salary);
    END IF;
END$$

DELIMITER ;


Problem statements based on MongoDB

Q1) Student Performance Tracker
Context:
A university wants to track students' marks across various subjects using MongoDB.
Collection: students
Sample Document:
{
"roll_no": 101,
"name": "Ankita Desai",
"department": "IT",
"marks": [
{ "subject": "DBMS", "score": 78 },
{ "subject": "AI", "score": 89 },
{ "subject": "OS", "score": 91 }
]
}
Tasks:
1. Insert at least 5 student documents with varying subjects and marks.
2. Retrieve all students with more than 85 in "AI".
3. Update the DBMS score of student roll_no: 101 to 85.
4. Delete a student with roll_no: 105.
5. Use aggregation to find the average score in OS across all students.

1. Insert at least 5 student documents
db.students.insertMany([
  {
    "roll_no": 101,
    "name": "Ankita Desai",
    "department": "IT",
    "marks": [
      { "subject": "DBMS", "score": 78 },
      { "subject": "AI", "score": 89 },
      { "subject": "OS", "score": 91 }
    ]
  },
  {
    "roll_no": 102,
    "name": "Ravi Mehta",
    "department": "CS",
    "marks": [
      { "subject": "DBMS", "score": 85 },
      { "subject": "AI", "score": 92 },
      { "subject": "OS", "score": 88 }
    ]
  },
  {
    "roll_no": 103,
    "name": "Sneha Patil",
    "department": "ECE",
    "marks": [
      { "subject": "DBMS", "score": 82 },
      { "subject": "AI", "score": 76 },
      { "subject": "OS", "score": 80 }
    ]
  },
  {
    "roll_no": 104,
    "name": "Aman Khan",
    "department": "IT",
    "marks": [
      { "subject": "DBMS", "score": 67 },
      { "subject": "AI", "score": 90 },
      { "subject": "OS", "score": 85 }
    ]
  },
  {
    "roll_no": 105,
    "name": "Neha Sharma",
    "department": "CS",
    "marks": [
      { "subject": "DBMS", "score": 70 },
      { "subject": "AI", "score": 82 },
      { "subject": "OS", "score": 79 }
    ]
  }
])

2. Retrieve all students with more than 85 in "AI"
db.students.find({
  marks: { $elemMatch: { subject: "AI", score: { $gt: 85 } } }
})

3. Update the DBMS score of student with roll_no: 101 to 85
db.students.updateOne(
  { roll_no: 101, "marks.subject": "DBMS" },
  { $set: { "marks.$.score": 85 } }
)

4. Delete a student with roll_no: 105
db.students.deleteOne({ roll_no: 105 })

5. Use aggregation to find the average score in OS across all students
db.students.aggregate([
  { $unwind: "$marks" },
  { $match: { "marks.subject": "OS" } },
  {
    $group: {
      _id: null,
      average_OS_score: { $avg: "$marks.score" }
    }
  }
])

Q2) Online Bookstore Database
Context:
An online bookstore wants to manage books, authors, and price data.
Collection: books
Sample Document:
{
"title": "The MongoDB Guide",
"author": "Ravi Joshi",

"price": 499,
"category": "Database",
"ratings": [4, 5, 5, 3]
}
Tasks:
1. Insert 5 books with details like title, author, price, category, and rating array.
2. Find all books priced under ₹500.
3. Update the price of a book titled "The MongoDB Guide" to ₹450.
4. Delete all books from category "Old Stock".
5. Use aggregation to calculate the average rating per book.

1. Insert 5 books
db.books.insertMany([
  {
    "title": "The MongoDB Guide",
    "author": "Ravi Joshi",
    "price": 499,
    "category": "Database",
    "ratings": [4, 5, 5, 3]
  },
  {
    "title": "Mastering Node.js",
    "author": "Sneha Kapoor",
    "price": 650,
    "category": "Programming",
    "ratings": [5, 4, 4, 5]
  },
  {
    "title": "Python Basics",
    "author": "Aman Verma",
    "price": 350,
    "category": "Programming",
    "ratings": [3, 4, 4, 4]
  },
  {
    "title": "Old Java Reference",
    "author": "Deepak Malhotra",
    "price": 200,
    "category": "Old Stock",
    "ratings": [2, 2, 3]
  },
  {
    "title": "Data Structures in C",
    "author": "Anjali Sharma",
    "price": 499,
    "category": "Computer Science",
    "ratings": [4, 3, 4]
  }
])

2. Find all books priced under ₹500
db.books.find({ price: { $lt: 500 } })

3. Update the price of "The MongoDB Guide" to ₹450
db.books.updateOne(
  { title: "The MongoDB Guide" },
  { $set: { price: 450 } }
)

4. Delete all books from category "Old Stock"
db.books.deleteMany({ category: "Old Stock" })

5. Use aggregation to calculate the average rating per book
db.books.aggregate([
  { $unwind: "$ratings" },
  {
    $group: {
      _id: "$title",
      average_rating: { $avg: "$ratings" }
    }
  }
])


Q3) Hospital Patient Records System
Context:
A hospital wants to store and analyze basic patient treatment information.
Collection: patients
Sample Document
{
"patient_id": "P1001",
"name": "Rohan Kulkarni",
"age": 45,
"department": "Cardiology",
"treatments": [
{ "treatment": "ECG", "cost": 1200 },
{ "treatment": "Angiography", "cost": 15000 }
]
}
Tasks:
1. Insert 4–5 patient documents with multiple treatments.
2. Retrieve all patients from "Cardiology".
3. Add a new treatment for patient "P1001".
4. Delete records of patients older than 80 years.
5. Use aggregation to compute the total treatment cost per patient.

1. Insert 4–5 patient documents with multiple treatments
db.patients.insertMany([
  {
    "patient_id": "P1001",
    "name": "Rohan Kulkarni",
    "age": 45,
    "department": "Cardiology",
    "treatments": [
      { "treatment": "ECG", "cost": 1200 },
      { "treatment": "Angiography", "cost": 15000 }
    ]
  },
  {
    "patient_id": "P1002",
    "name": "Sita Sharma",
    "age": 62,
    "department": "Orthopedics",
    "treatments": [
      { "treatment": "X-ray", "cost": 500 },
      { "treatment": "Knee Replacement", "cost": 45000 }
    ]
  },
  {
    "patient_id": "P1003",
    "name": "Arjun Mehta",
    "age": 77,
    "department": "Cardiology",
    "treatments": [
      { "treatment": "ECG", "cost": 1000 },
      { "treatment": "Stress Test", "cost": 2500 }
    ]
  },
  {
    "patient_id": "P1004",
    "name": "Geeta Rao",
    "age": 83,
    "department": "Neurology",
    "treatments": [
      { "treatment": "MRI", "cost": 3000 },
      { "treatment": "Consultation", "cost": 800 }
    ]
  },
  {
    "patient_id": "P1005",
    "name": "Manoj Verma",
    "age": 52,
    "department": "Dermatology",
    "treatments": [
      { "treatment": "Biopsy", "cost": 2000 },
      { "treatment": "Skin Treatment", "cost": 1500 }
    ]
  }
])

2. Retrieve all patients from "Cardiology"
db.patients.find({ department: "Cardiology" })

3. Add a new treatment for patient "P1001"
db.patients.updateOne(
  { patient_id: "P1001" },
  { $push: { treatments: { treatment: "Blood Test", cost: 400 } } }
)

4. Delete records of patients older than 80 years
db.patients.deleteMany({ age: { $gt: 80 } })

5. Aggregation to compute total treatment cost per patient
db.patients.aggregate([
  { $unwind: "$treatments" },
  {
    $group: {
      _id: "$name",
      total_cost: { $sum: "$treatments.cost" }
    }
  }
])

Problem 4: Movie Ratings and Reviews
Context:
A movie platform stores user reviews and wants to perform analysis on the data.
Collection: movies
Sample Document:
{
"movie_id": 1,
"title": "Interstellar",
"genre": "Sci-Fi",
"release_year": 2014,
"ratings": [
{ "user": "user1", "score": 5 },
{ "user": "user2", "score": 4 }
]
}
Tasks:
1. Insert at least 5 movie documents with ratings.
2. Find all movies released after 2010 in the "Sci-Fi" genre.
3. Update the title of a movie from "Inception" to "Inception (2010)".
4. Delete all movies with an average rating below 3.
5. Use aggregation to calculate the average score of each movie.

1. Insert at least 5 movie documents with ratings
db.movies.insertMany([
  {
    "movie_id": 1,
    "title": "Interstellar",
    "genre": "Sci-Fi",
    "release_year": 2014,
    "ratings": [
      { "user": "user1", "score": 5 },
      { "user": "user2", "score": 4 }
    ]
  },
  {
    "movie_id": 2,
    "title": "Inception",
    "genre": "Sci-Fi",
    "release_year": 2010,
    "ratings": [
      { "user": "user3", "score": 5 },
      { "user": "user4", "score": 5 }
    ]
  },
  {
    "movie_id": 3,
    "title": "The Notebook",
    "genre": "Romance",
    "release_year": 2004,
    "ratings": [
      { "user": "user5", "score": 4 },
      { "user": "user6", "score": 3 }
    ]
  },
  {
    "movie_id": 4,
    "title": "Tenet",
    "genre": "Sci-Fi",
    "release_year": 2020,
    "ratings": [
      { "user": "user7", "score": 3 },
      { "user": "user8", "score": 4 }
    ]
  },
  {
    "movie_id": 5,
    "title": "Low Rated Movie",
    "genre": "Drama",
    "release_year": 2019,
    "ratings": [
      { "user": "user9", "score": 1 },
      { "user": "user10", "score": 2 }
    ]
  }
])

2. Find all movies released after 2010 in the "Sci-Fi" genre
db.movies.find({
  genre: "Sci-Fi",
  release_year: { $gt: 2010 }
})

3. Update the title of a movie from "Inception" to "Inception (2010)"
db.movies.updateOne(
  { title: "Inception" },
  { $set: { title: "Inception (2010)" } }
)

4. Delete all movies with an average rating below 3
db.movies.aggregate([
  { $unwind: "$ratings" },
  {
    $group: {
      _id: "$_id",
      avgRating: { $avg: "$ratings.score" }
    }
  },
  { $match: { avgRating: { $lt: 3 } } }
]).forEach(doc => {
  db.movies.deleteOne({ _id: doc._id });
});

5. Use aggregation to calculate the average score of each movie
db.movies.aggregate([
  { $unwind: "$ratings" },
  {
    $group: {
      _id: "$title",
      average_score: { $avg: "$ratings.score" }
    }
  }
])


