Problem 1: Student Performance Tracker
1. Insert at least 5 student documents:
js
Copy code
db.students.insertMany([
  {
    "roll_no": 101,
    "name": "Ankita Desai",
    "department": "IT",
    "marks": [
      { "subject": "DBMS", "score": 78 },
      { "subject": "AI", "score": 89 },
      { "subject": "OS", "score": 91 }
    ]
  },
  {
    "roll_no": 102,
    "name": "Ravi Mehta",
    "department": "CS",
    "marks": [
      { "subject": "DBMS", "score": 68 },
      { "subject": "AI", "score": 72 },
      { "subject": "OS", "score": 88 }
    ]
  },
  {
    "roll_no": 103,
    "name": "Neha Jain",
    "department": "IT",
    "marks": [
      { "subject": "DBMS", "score": 91 },
      { "subject": "AI", "score": 95 },
      { "subject": "OS", "score": 90 }
    ]
  },
  {
    "roll_no": 104,
    "name": "Sahil Verma",
    "department": "ECE",
    "marks": [
      { "subject": "DBMS", "score": 82 },
      { "subject": "AI", "score": 88 },
      { "subject": "OS", "score": 84 }
    ]
  },
  {
    "roll_no": 105,
    "name": "Priya Nair",
    "department": "CS",
    "marks": [
      { "subject": "DBMS", "score": 80 },
      { "subject": "AI", "score": 76 },
      { "subject": "OS", "score": 92 }
    ]
  }
]);
Let me know once you've inserted the documents, and I’ll give you the next query: → Retrieve all students with more than 85 in "AI".






You said:
get all the solutions of the all the queries remaining


ChatGPT said:
Here are solutions for all the remaining queries from the four MongoDB problem statements:

1. Student Performance Tracker
2. Retrieve all students with more than 85 in "AI":
js
Copy code
db.students.find({
  marks: {
    $elemMatch: {
      subject: "AI",
      score: { $gt: 85 }
    }
  }
});
3. Update the DBMS score of student roll_no: 101 to 85:
js
Copy code
db.students.updateOne(
  { roll_no: 101, "marks.subject": "DBMS" },
  { $set: { "marks.$.score": 85 } }
);
4. Delete a student with roll_no: 105:
js
Copy code
db.students.deleteOne({ roll_no: 105 });
5. Use aggregation to find the average score in OS across all students:
js
Copy code
db.students.aggregate([
  { $unwind: "$marks" },
  { $match: { "marks.subject": "OS" } },
  {
    $group: {
      _id: null,
      average_OS_score: { $avg: "$marks.score" }
    }
  }
]);
2. Online Bookstore Database
1. Insert 5 books:
js
Copy code
db.books.insertMany([
  {
    title: "The MongoDB Guide",
    author: "Ravi Joshi",
    price: 499,
    category: "Database",
    ratings: [4, 5, 5, 3]
  },
  {
    title: "JavaScript Essentials",
    author: "Amit Sinha",
    price: 399,
    category: "Programming",
    ratings: [5, 4, 4, 5]
  },
  {
    title: "Mastering Python",
    author: "Neha Shah",
    price: 599,
    category: "Programming",
    ratings: [4, 4, 4, 3]
  },
  {
    title: "Data Science Basics",
    author: "Anjali Rao",
    price: 999,
    category: "Data Science",
    ratings: [5, 5, 5]
  },
  {
    title: "Old Algorithms",
    author: "Kunal Desai",
    price: 299,
    category: "Old Stock",
    ratings: [2, 3, 2]
  }
]);
2. Find all books priced under ₹500:
js
Copy code
db.books.find({ price: { $lt: 500 } });
3. Update the price of "The MongoDB Guide" to ₹450:
js
Copy code
db.books.updateOne(
  { title: "The MongoDB Guide" },
  { $set: { price: 450 } }
);
4. Delete all books from category "Old Stock":
js
Copy code
db.books.deleteMany({ category: "Old Stock" });
5. Aggregation: average rating per book:
js
Copy code
db.books.aggregate([
  {
    $project: {
      title: 1,
      average_rating: { $avg: "$ratings" }
    }
  }
]);
3. Hospital Patient Records System
1. Insert 4–5 patient documents:
js
Copy code
db.patients.insertMany([
  {
    patient_id: "P1001",
    name: "Rohan Kulkarni",
    age: 45,
    department: "Cardiology",
    treatments: [
      { treatment: "ECG", cost: 1200 },
      { treatment: "Angiography", cost: 15000 }
    ]
  },
  {
    patient_id: "P1002",
    name: "Sneha Rao",
    age: 33,
    department: "Neurology",
    treatments: [
      { treatment: "MRI", cost: 8000 }
    ]
  },
  {
    patient_id: "P1003",
    name: "Amit Jain",
    age: 60,
    department: "Orthopedics",
    treatments: [
      { treatment: "X-Ray", cost: 500 },
      { treatment: "Fracture Treatment", cost: 4500 }
    ]
  },
  {
    patient_id: "P1004",
    name: "Sunita Mehta",
    age: 85,
    department: "Cardiology",
    treatments: [
      { treatment: "Echo", cost: 2000 }
    ]
  }
]);
2. Retrieve all patients from "Cardiology":
js
Copy code
db.patients.find({ department: "Cardiology" });
3. Add a new treatment for patient "P1001":
js
Copy code
db.patients.updateOne(
  { patient_id: "P1001" },
  { $push: { treatments: { treatment: "Blood Test", cost: 500 } } }
);
4. Delete records of patients older than 80:
js
Copy code
db.patients.deleteMany({ age: { $gt: 80 } });
5. Aggregation to compute total treatment cost per patient:
js
Copy code
db.patients.aggregate([
  { $unwind: "$treatments" },
  {
    $group: {
      _id: "$name",
      total_cost: { $sum: "$treatments.cost" }
    }
  }
]);
4. Movie Ratings and Reviews
1. Insert at least 5 movie documents:
js
Copy code
db.movies.insertMany([
  {
    movie_id: 1,
    title: "Interstellar",
    genre: "Sci-Fi",
    release_year: 2014,
    ratings: [
      { user: "user1", score: 5 },
      { user: "user2", score: 4 }
    ]
  },
  {
    movie_id: 2,
    title: "Inception",
    genre: "Sci-Fi",
    release_year: 2010,
    ratings: [
      { user: "user3", score: 5 },
      { user: "user4", score: 5 }
    ]
  },
  {
    movie_id: 3,
    title: "The Martian",
    genre: "Sci-Fi",
    release_year: 2015,
    ratings: [
      { user: "user5", score: 4 },
      { user: "user6", score: 4 }
    ]
  },
  {
    movie_id: 4,
    title: "The Notebook",
    genre: "Romance",
    release_year: 2004,
    ratings: [
      { user: "user7", score: 2 },
      { user: "user8", score: 2 }
    ]
  },
  {
    movie_id: 5,
    title: "Avengers: Endgame",
    genre: "Action",
    release_year: 2019,
    ratings: [
      { user: "user9", score: 5 },
      { user: "user10", score: 5 }
    ]
  }
]);
2. Find all movies released after 2010 in the "Sci-Fi" genre:
js
Copy code
db.movies.find({
  genre: "Sci-Fi",
  release_year: { $gt: 2010 }
});
3. Update the title of a movie from "Inception" to "Inception (2010)":
js
Copy code
db.movies.updateOne(
  { title: "Inception" },
  { $set: { title: "Inception (2010)" } }
);
4. Delete all movies with an average rating below 3:
js
Copy code
db.movies.aggregate([
  {
    $project: {
      title: 1,
      avg_rating: { $avg: "$ratings.score" }
    }
  },
  {
    $match: { avg_rating: { $lt: 3 } }
  }
]).forEach(doc => db.movies.deleteOne({ title: doc.title }));
5. Aggregation to calculate average score of each movie:
js
Copy code
db.movies.aggregate([
  {
    $project: {
      title: 1,
      average_rating: { $avg: "$ratings.score" }
    }
  }
]);