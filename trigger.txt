DELIMITER $$

CREATE PROCEDURE give_bonus()
BEGIN
    -- Declare variables
    DECLARE done INT DEFAULT FALSE;
    DECLARE empName VARCHAR(50);
    DECLARE empID INT;
    DECLARE currentBonus INT;

    -- Cursor for selecting eligible employees
    DECLARE emp_cursor CURSOR FOR
        SELECT emp_id, name, bonus FROM employees WHERE salary < 30000;

    -- Handler to exit loop
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open cursor
    OPEN emp_cursor;

    -- Start looping through cursor
    read_loop: LOOP
        FETCH emp_cursor INTO empID, empName, currentBonus;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Update bonus
        UPDATE employees
        SET bonus = bonus + 5000
        WHERE emp_id = empID;

        -- Show result
        SELECT CONCAT('Bonus of ₹', bonus, ' updated for ', empName) AS Message
        FROM employees WHERE emp_id = empID;
    END LOOP;

    -- Close cursor
    CLOSE emp_cursor;
END$$

DELIMITER ;



DELIMITER //

CREATE PROCEDURE CalculateFines()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE b_id INT;
    DECLARE s_name VARCHAR(50);
    DECLARE d_date DATE;
    DECLARE r_date DATE;
    DECLARE days_late INT;
    
    -- Cursor declaration
    DECLARE borrower_cursor CURSOR FOR
        SELECT borrow_id, student_name, due_date, return_date
        FROM Borrowers;
    
    -- Handler for end of data
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Open cursor
    OPEN borrower_cursor;

    read_loop: LOOP
        FETCH borrower_cursor INTO b_id, s_name, d_date, r_date;
        IF done THEN
            LEAVE read_loop;
        END IF;

        IF r_date > d_date THEN
            SET days_late = DATEDIFF(r_date, d_date);
            UPDATE Borrowers
            SET fine = days_late * 2
            WHERE borrow_id = b_id;

            SELECT CONCAT('Fine of ₹', days_late * 2, ' updated for ', s_name) AS Message;
        END IF;
    END LOOP;

    CLOSE borrower_cursor;
END //

DELIMITER ;



DELIMITER $$

CREATE TRIGGER before_salary_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    -- Check if the salary is actually changing
    IF OLD.salary <> NEW.salary THEN
        INSERT INTO salary_log (emp_id, old_salary, new_salary)
        VALUES (OLD.emp_id, OLD.salary, NEW.salary);
    END IF;
END$$

DELIMITER ;



