1 
Identify primary keys and foreign keys for following database. Create tables and execute queries for  given statements.  
employee(eid,ename,salary) 
assignment(projectid,eid) 
project(projectid,project_name,manager) 
manager(eid,ename) 
Write queries for the following questions: 
1. Alter table to add address in employee table. 
2. Display employee name and projects on which they are working/  
3. Display projectid, projectname and their managers. 
4. Create view of employees working on 'Bank Management' project. 
5. Print names of employees whose salary is greater than 40000 
6. Update salary of each employee with increase of Rs.2000

CREATE DATABASE one;

use one;

CREATE TABLE employee (
    eid INT PRIMARY KEY,
    ename VARCHAR(100),
    salary INT
);

CREATE TABLE manager (
    eid INT PRIMARY KEY,
    ename VARCHAR(100),
    FOREIGN KEY (eid) REFERENCES employee(eid) ON DELETE CASCADE
);

CREATE TABLE project (
    projectid INT PRIMARY KEY,
    project_name VARCHAR(100),
    manager INT,
    FOREIGN KEY (manager) REFERENCES manager(eid) ON DELETE SET NULL
);

CREATE TABLE assignment (
    projectid INT,
    eid INT,
    PRIMARY KEY (projectid, eid),
    FOREIGN KEY (projectid) REFERENCES project(projectid) ON DELETE CASCADE,
    FOREIGN KEY (eid) REFERENCES employee(eid) ON DELETE CASCADE
);

-- Insert employees
INSERT INTO employee (eid, ename, salary) VALUES
(1, 'Alice', 50000),
(2, 'Bob', 45000),
(3, 'Charlie', 38000),
(4, 'David', 42000),
(5, 'Emma', 60000);

-- Insert managers (must be employees)
INSERT INTO manager (eid, ename) VALUES
(1, 'Alice'),
(5, 'Emma');

-- Insert projects with assigned managers
INSERT INTO project (projectid, project_name, manager) VALUES
(101, 'E-commerce System', 1),
(102, 'Bank Management', 5),
(103, 'Inventory System', 1);

-- Assign employees to projects
INSERT INTO assignment (projectid, eid) VALUES
(101, 2), (101, 3), 
(102, 4), (102, 5), 
(103, 1), (103, 2);

# 1 
ALTER TABLE employee ADD COLUMN address VARCHAR(255);

#2
SELECT e.ename, p.project_name 
FROM employee e
JOIN assignment a ON e.eid = a.eid
JOIN project p ON a.projectid = p.projectid;

#3
SELECT p.projectid, p.project_name, m.ename AS manager_name 
FROM project p
JOIN manager m ON p.manager = m.eid;

#4
CREATE VIEW bank_management_employees AS 
SELECT e.eid, e.ename, e.salary 
FROM employee e
JOIN assignment a ON e.eid = a.eid
JOIN project p ON a.projectid = p.projectid
WHERE p.project_name = 'Bank Management';

#5
SELECT ename FROM employee WHERE salary > 40000;

#6
UPDATE employee SET salary = salary + 2000;

   
Q2 
Identify primary keys and foreign keys for following database. Create tables and execute queries for  given statements.  
employee(eid, ename, salary) 
assignment(projectid,eid) 
project(projectid,project_name,manager) 
manager(eid,ename) 
Write queries for the following questions: 
1. Modify eid to use auto_increment  
2. Display Employees working in both projects 'Bank Management' and 'Content Management'. 3. Display average salary of organization. 
4. Display employees who do not work on 'Bank Management' Project. 
5. Delete employee whose id is 5. 
6. Display employee having highest salary in oraganization.

Queries
CREATE DATABASE company;
USE company;

-- Employee table with auto-incrementing eid
CREATE TABLE employee (
    eid INT AUTO_INCREMENT PRIMARY KEY,
    ename VARCHAR(50),
    salary DECIMAL(10,2)
);
-- Manager table
CREATE TABLE manager (
    eid INT PRIMARY KEY,
    ename VARCHAR(50),
    FOREIGN KEY (eid) REFERENCES employee(eid) ON DELETE CASCADE
);
-- Project table
CREATE TABLE project (
    projectid INT PRIMARY KEY,
    project_name VARCHAR(100),
    manager INT,
    FOREIGN KEY (manager) REFERENCES manager(eid) ON DELETE SET NULL
);

-- Assignment table (Junction table between employee and project)
CREATE TABLE assignment (
    projectid INT,
    eid INT,
    PRIMARY KEY (projectid, eid),
    FOREIGN KEY (projectid) REFERENCES project(projectid) ON DELETE CASCADE,
    FOREIGN KEY (eid) REFERENCES employee(eid) ON DELETE CASCADE
);


-- Insert employees
INSERT INTO employee (ename, salary) VALUES 
('Alice', 60000), 
('Bob', 55000), 
('Charlie', 70000), 
('David', 50000), 
('Eve', 75000);

-- Insert managers
INSERT INTO manager (eid, ename) VALUES 
(1, 'Alice'),
(3, 'Charlie');

-- Insert projects
INSERT INTO project (projectid, project_name, manager) VALUES 
(101, 'Bank Management', 1), 
(102, 'Content Management', 3);

-- Assign employees to projects
INSERT INTO assignment (projectid, eid) VALUES 
(101, 1), (101, 2), -- Alice and Bob in Bank Management
(102, 1), (102, 3), -- Alice and Charlie in Content Management
(101, 4), (102, 5); -- David in Bank, Eve in Content Management
	
    
    
#2 
SELECT e.eid, e.ename
FROM employee e
JOIN assignment a1 ON e.eid = a1.eid
JOIN project p1 ON a1.projectid = p1.projectid AND p1.project_name = 'Bank Management'
JOIN assignment a2 ON e.eid = a2.eid
JOIN project p2 ON a2.projectid = p2.projectid AND p2.project_name = 'Content Management';

#3
SELECT AVG(salary) AS average_salary FROM employee;

#4
SELECT e.eid, e.ename
FROM employee e
WHERE e.eid NOT IN (
    SELECT a.eid FROM assignment a 
    JOIN project p ON a.projectid = p.projectid
    WHERE p.project_name = 'Bank Management'
);

#5
DELETE FROM employee WHERE eid = 5;

#6
SELECT eid, ename, salary 
FROM employee 
ORDER BY salary DESC 
LIMIT 1;


Q3 
Identify primary keys and foreign keys for following database. Create tables and execute queries for  given statements.  
supplier(supplierid,sname,saddress) 
parts(part_id,part_name,color); 
catalog(supplierid,part_id,cost); 
Write queries for the following questions: 
1. Find name of supplier who supply ‘green’ parts. 
2. find name of suppliers who supply both blue and green parts. 
3. Find supplier who supply all parts. 
4. Find total cost of red parts. 
5. Find supplier who supply green parts with minimum cost. 
6. Update color of part having part_id = 4 and supplier_id = 2.

-- 1. Find the name of suppliers who supply ‘green’ parts.
SELECT DISTINCT s.sname 
FROM supplier s
JOIN catalog c ON s.supplierid = c.supplierid
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'green';

-- 2. Find suppliers who supply both blue and green parts.
SELECT s.sname 
FROM supplier s
JOIN catalog c ON s.supplierid = c.supplierid
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'blue'
INTERSECT
SELECT s.sname 
FROM supplier s
JOIN catalog c ON s.supplierid = c.supplierid
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'green';

-- 3. Find suppliers who supply all parts.
SELECT s.sname 
FROM supplier s
WHERE NOT EXISTS (
    SELECT p.part_id FROM parts p
    EXCEPT
    SELECT c.part_id FROM catalog c WHERE c.supplierid = s.supplierid
);

-- 4. Find the total cost of red parts.
SELECT SUM(c.cost) AS total_red_parts_cost 
FROM catalog c
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'red';

-- 5. Find the supplier who supplies green parts at the minimum cost.
SELECT s.sname 
FROM supplier s
JOIN catalog c ON s.supplierid = c.supplierid
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'green'
ORDER BY c.cost ASC
LIMIT 1;

-- 6. Update the color of part with part_id = 4 and supplier_id = 2.
UPDATE parts 
SET color = 'updated_color'
WHERE part_id = 4 AND part_id IN (
    SELECT part_id FROM catalog WHERE supplierid = 2
);


Q4 
Identify primary keys and foreign keys for following database. Create tables and execute queries for  given statements.  
emp(eid,ename,street,city); 
works(eid,company_name,salary); 
company(company_name,city); 
manages(eid,manager_id); 
Write queries for the following questions: 
1. Update company of employee name = ‘Prashant’ from ‘Infosys’ to ‘TCS’. 2. Display names & cities of all employees who work for 'Infosys' 
3. Display names & Street address & of all employees who work in TCS cities and earn more  than 20000. 
4. Find all employees in database who do not work for 'Infosys'. 
5. Find company wise total salary. 
6. Find names of all employees who work for 'Accenture'.
-- 1. Update the company of employee 'Prashant' from 'Infosys' to 'TCS'.
UPDATE works 
SET company_name = 'TCS'
WHERE eid = (SELECT eid FROM emp WHERE ename = 'Prashant') 
AND company_name = 'Infosys';

-- 2. Display names & cities of all employees who work for 'Infosys'.
SELECT e.ename, e.city 
FROM emp e
JOIN works w ON e.eid = w.eid
WHERE w.company_name = 'Infosys';

-- 3. Display names & street address of all employees who work in TCS cities and earn more than 20000.
SELECT e.ename, e.street 
FROM emp e
JOIN works w ON e.eid = w.eid
JOIN company c ON w.company_name = c.company_name
WHERE c.company_name = 'TCS' AND w.salary > 20000;

-- 4. Find all employees who do not work for 'Infosys'.
SELECT e.ename 
FROM emp e
WHERE e.eid NOT IN (SELECT w.eid FROM works w WHERE w.company_name = 'Infosys');

-- 5. Find company-wise total salary.
SELECT company_name, SUM(salary) AS total_salary
FROM works
GROUP BY company_name;

-- 6. Find names of all employees who work for 'Accenture'.
SELECT e.ename 
FROM emp e
JOIN works w ON e.eid = w.eid
WHERE w.company_name = 'Accenture';


Q5 
Identify primary keys and foreign keys for following database. Create tables and execute queries for  given statements.  
employee(eid,ename,salary) 
assignment(projectid,eid) 
project(projectid,project_name,manager) 
manager(eid,ename) 
Write queries for the following questions: 
1. Modify eid to use auto_increment  
2. Display Employees working in both projects 'Bank Management' and 'Content Management'. 3. Display average salary of organization. 
4. Display employees who do not work on 'Bank Management' Project. 
5. Delete employee whose id is 5. 
6. Display employee having highest salary in oraganization.
-- 1. Modify eid to use AUTO_INCREMENT.
ALTER TABLE employee MODIFY eid INT AUTO_INCREMENT PRIMARY KEY;

-- 2. Display employees working in both 'Bank Management' and 'Content Management'.
SELECT e.eid, e.ename
FROM employee e
JOIN assignment a1 ON e.eid = a1.eid
JOIN project p1 ON a1.projectid = p1.projectid AND p1.project_name = 'Bank Management'
JOIN assignment a2 ON e.eid = a2.eid
JOIN project p2 ON a2.projectid = p2.projectid AND p2.project_name = 'Content Management';

-- 3. Display average salary of the organization.
SELECT AVG(salary) AS average_salary FROM employee;

-- 4. Display employees who do not work on 'Bank Management' Project.
SELECT e.eid, e.ename
FROM employee e
WHERE e.eid NOT IN (
    SELECT a.eid FROM assignment a 
    JOIN project p ON a.projectid = p.projectid
    WHERE p.project_name = 'Bank Management'
);

-- 5. Delete employee whose id is 5.
DELETE FROM employee WHERE eid = 5;

-- 6. Display employee with the highest salary.
SELECT eid, ename, salary 
FROM employee 
ORDER BY salary DESC 
LIMIT 1;


Q6 
Identify primary keys and foreign keys for following database. Create tables and execute queries for  given statements.  
supplier(supplierid,sname,saddress) 
parts(part_id,part_name,color); 
catalog(supplierid,part_id,cost); 
Write queries for the following questions: 
1. Find name of supplier who supply ‘green’ parts. 
2. Find name of suppliers who supply both blue and green parts. 
3. Find supplier who supply all parts. 
4. Find total cost of red parts. 
5. Find supplier who supply green parts with minimum cost. 
6. Update color of part having part_id = 4 and supplier_id = 2.
-- 1. Find the name of suppliers who supply ‘green’ parts.
SELECT DISTINCT s.sname 
FROM supplier s
JOIN catalog c ON s.supplierid = c.supplierid
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'green';

-- 2. Find suppliers who supply both blue and green parts.
SELECT s.sname 
FROM supplier s
JOIN catalog c ON s.supplierid = c.supplierid
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'blue'
INTERSECT
SELECT s.sname 
FROM supplier s
JOIN catalog c ON s.supplierid = c.supplierid
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'green';

-- 3. Find suppliers who supply all parts.
SELECT s.sname 
FROM supplier s
WHERE NOT EXISTS (
    SELECT p.part_id FROM parts p
    EXCEPT
    SELECT c.part_id FROM catalog c WHERE c.supplierid = s.supplierid
);

-- 4. Find the total cost of red parts.
SELECT SUM(c.cost) AS total_red_parts_cost 
FROM catalog c
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'red';

-- 5. Find the supplier who supplies green parts at the minimum cost.
SELECT s.sname 
FROM supplier s
JOIN catalog c ON s.supplierid = c.supplierid
JOIN parts p ON c.part_id = p.part_id
WHERE p.color = 'green'
ORDER BY c.cost ASC
LIMIT 1;

-- 6. Update the color of part with part_id = 4 and supplier_id = 2.
UPDATE parts 
SET color = 'updated_color'
WHERE part_id = 4 AND part_id IN (
    SELECT part_id FROM catalog WHERE supplierid = 2
);


Q7 
Car Rental Database Management System 
Customers (CustomerID, Name, Email, Phone, City) 
Cars (CarID, Model, Brand, Year, RentalPricePerDay, AvailabilityStatus) 
Rentals (RentalID, CustomerID, CarID, StartDate, EndDate, TotalAmount) 
Write queries for the following questions: 
1. Create a Payments table with attributes: PaymentID, RentalID (FK), PaymentDate,  AmountPaid, and PaymentMethod. 
2. Update AvailabilityStatus of a car to 'Rented' for a specific CustomerID and CarID. 3. Retrieve Customer Name, Car Model, and Rental StartDate for rentals where  RentalPricePerDay is above 1000. 
4. Calculate the total rental amount collected per Car Brand. 
5. Find the top 3 customers who have spent the most on rentals.
-- 1. Create a Payments table.
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    RentalID INT,
    PaymentDate DATE,
    AmountPaid DECIMAL(10,2),
    PaymentMethod VARCHAR(50),
    FOREIGN KEY (RentalID) REFERENCES Rentals(RentalID)
);

-- 2. Update AvailabilityStatus of a car to 'Rented'.
UPDATE Cars 
SET AvailabilityStatus = 'Rented'
WHERE CarID = ? AND EXISTS (
    SELECT 1 FROM Rentals WHERE CustomerID = ? AND CarID = ?
);

-- 3. Retrieve Customer Name, Car Model, and Rental StartDate for rentals where RentalPricePerDay is above 1000.
SELECT c.Name, car.Model, r.StartDate
FROM Customers c
JOIN Rentals r ON c.CustomerID = r.CustomerID
JOIN Cars car ON r.CarID = car.CarID
WHERE car.RentalPricePerDay > 1000;

-- 4. Calculate the total rental amount collected per Car Brand.
SELECT car.Brand, SUM(r.TotalAmount) AS TotalRentalAmount
FROM Rentals r
JOIN Cars car ON r.CarID = car.CarID
GROUP BY car.Brand;

-- 5. Find the top 3 customers who have spent the most on rentals.
SELECT c.Name, SUM(r.TotalAmount) AS TotalSpent
FROM Customers c
JOIN Rentals r ON c.CustomerID = r.CustomerID
GROUP BY c.CustomerID
ORDER BY TotalSpent DESC
LIMIT 3;


Q8 
Online Shopping System 
1. Customers (CustomerID, Name, Email, Phone, Address) 
2. Products (ProductID, Name, Category, Price, StockQuantity) 
3. Orders (OrderID, CustomerID, OrderDate, TotalAmount) 
4. OrderDetails (OrderDetailID, OrderID, ProductID, Quantity, Subtotal) 
Write queries for the following questions: 
1. Create a Payments table with PaymentID, OrderID (FK), PaymentDate, AmountPaid, and  PaymentMethod. 
2. Update the stock quantity of a product after an order is placed. 
3. Retrieve Customer Name, Order Date, and TotalAmount for orders where the total amount  exceeds 5000. 
4. Calculate the total sales per product category. 
5. Find the top 5 customers who have spent the most on orders.
-- 1. Create a Payments table.
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    PaymentDate DATE,
    AmountPaid DECIMAL(10,2),
    PaymentMethod VARCHAR(50),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- 2. Update the stock quantity of a product after an order is placed.
UPDATE Products 
SET StockQuantity = StockQuantity - (
    SELECT Quantity FROM OrderDetails WHERE ProductID = Products.ProductID
) 
WHERE ProductID = ?;

-- 3. Retrieve Customer Name, Order Date, and TotalAmount for orders where the total amount exceeds 5000.
SELECT c.Name, o.OrderDate, o.TotalAmount
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.TotalAmount > 5000;

-- 4. Calculate the total sales per product category.
SELECT p.Category, SUM(od.Subtotal) AS TotalSales
FROM OrderDetails od
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY p.Category;

-- 5. Find the top 5 customers who have spent the most on orders.
SELECT c.Name, SUM(o.TotalAmount) AS TotalSpent
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID
ORDER BY TotalSpent DESC
LIMIT 5;


Q9 
Library Management System 
1. Members (MemberID, Name, Email, Phone, MembershipDate) 
2. Books (BookID, Title, Author, Genre, CopiesAvailable) 
3. BorrowedBooks (BorrowID, MemberID, BookID, BorrowDate, ReturnDate) Write queries for the following questions: 
1. CREATE TABLE – Create a Fines table with FineID, MemberID (FK), Amount, Status, and  FineDate. 
2. UPDATE – Update CopiesAvailable when a book is borrowed or returned. 3. SELECT with JOIN & Operators – Retrieve Member Name, Book Title, and Borrow Date for  books borrowed in the last month. 
4. GROUP BY & Aggregate Function – Find the number of books borrowed per genre. 5. Joins & Aggregate Functions – Find the top 5 members who borrowed the most books.
-- 1. Create a Fines table.
CREATE TABLE Fines (
    FineID INT PRIMARY KEY AUTO_INCREMENT,
    MemberID INT,
    Amount DECIMAL(10,2),
    Status VARCHAR(50),
    FineDate DATE,
    FOREIGN KEY (MemberID) REFERENCES Members(MemberID)
);

-- 2. Update CopiesAvailable when a book is borrowed or returned.
UPDATE Books 
SET CopiesAvailable = CopiesAvailable - 1
WHERE BookID = ?;

UPDATE Books 
SET CopiesAvailable = CopiesAvailable + 1
WHERE BookID = ?;

-- 3. Retrieve Member Name, Book Title, and Borrow Date for books borrowed in the last month.
SELECT m.Name, b.Title, bb.BorrowDate
FROM Members m
JOIN BorrowedBooks bb ON m.MemberID = bb.MemberID
JOIN Books b ON bb.BookID = b.BookID
WHERE bb.BorrowDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);

-- 4. Find the number of books borrowed per genre.
SELECT b.Genre, COUNT(*) AS BooksBorrowed
FROM BorrowedBooks bb
JOIN Books b ON bb.BookID = b.BookID
GROUP BY b.Genre;

-- 5. Find the top 5 members who borrowed the most books.
SELECT m.Name, COUNT(*) AS BooksBorrowed
FROM Members m
JOIN BorrowedBooks bb ON m.MemberID = bb.MemberID
GROUP BY m.MemberID
ORDER BY BooksBorrowed DESC
LIMIT 5;


Q10 
Hospital Management System 
1. Patients (PatientID, Name, Age, Gender, Contact) 
2. Doctors (DoctorID, Name, Specialization, Contact) 
3. Appointments (AppointmentID, PatientID, DoctorID, AppointmentDate, Status) 4. Bills (BillID, PatientID, Amount, PaymentStatus) 
Write queries for the following questions: 
1. Create table – create a medicalrecords table with recordid, patientid (fk), diagnosis,  prescription, and recorddate. 
2. Update – update an appointment status to "completed" after a patient’s visit. 3. Select with join & operators – retrieve patient name, doctor name, and appointment date for  patients who consulted a specific specialization. 
4. Group by & aggregate function – find the total revenue collected per doctor. 5. Joins & aggregate functions – find the top 3 doctors who attended the highest number of  appointments.
-- 1. Create a MedicalRecords table.
CREATE TABLE MedicalRecords (
    RecordID INT PRIMARY KEY AUTO_INCREMENT,
    PatientID INT,
    Diagnosis TEXT,
    Prescription TEXT,
    RecordDate DATE,
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)
);

-- 2. Update an appointment status to "Completed" after a patient’s visit.
UPDATE Appointments 
SET Status = 'Completed'
WHERE AppointmentID = ?;

-- 3. Retrieve Patient Name, Doctor Name, and Appointment Date for patients who consulted a specific specialization.
SELECT p.Name AS PatientName, d.Name AS DoctorName, a.AppointmentDate
FROM Patients p
JOIN Appointments a ON p.PatientID = a.PatientID
JOIN Doctors d ON a.DoctorID = d.DoctorID
WHERE d.Specialization = ?;

-- 4. Find the total revenue collected per doctor.
SELECT d.Name AS DoctorName, SUM(b.Amount) AS TotalRevenue
FROM Doctors d
JOIN Appointments a ON d.DoctorID = a.DoctorID
JOIN Bills b ON a.PatientID = b.PatientID
GROUP BY d.DoctorID;

-- 5. Find the top 3 doctors who attended the highest number of appointments.
SELECT d.Name AS DoctorName, COUNT(a.AppointmentID) AS TotalAppointments
FROM Doctors d
JOIN Appointments a ON d.DoctorID = a.DoctorID
GROUP BY d.DoctorID
ORDER BY TotalAppointments DESC
LIMIT 3;


Q11 
University Database Management System 
1. Student Management: Store student details such as StudentID, Name, Age, Gender,  Department, and Email. 
2. Course Management: Maintain course details including CourseID, CourseName, Credits, and  Department. 
3. Enrollment System: Allow students to enroll in multiple courses, tracking StudentID,  CourseID, EnrollmentDate, and Grade. 
4. Professor Management: Store professor details like ProfessorID, Name, Department, and  Email 
Write queries for the following questions: 
1. Calculate percentage of students in each department 
2. Detect duplicate enrollments (same student enrolled in same course in the same semester) 3. Find the semester with the highest average enrollments per course 
4. List students with more than 3 enrollments  
5. List all courses and the number of students enrolled in each
-- 1. Calculate the percentage of students in each department.
SELECT Department, 
       COUNT(StudentID) * 100.0 / (SELECT COUNT(*) FROM Students) AS Percentage
FROM Students
GROUP BY Department;

-- 2. Detect duplicate enrollments (same student enrolled in the same course in the same semester).
SELECT StudentID, CourseID, EnrollmentDate, COUNT(*) 
FROM Enrollment
GROUP BY StudentID, CourseID, EnrollmentDate
HAVING COUNT(*) > 1;

-- 3. Find the semester with the highest average enrollments per course.
SELECT EnrollmentDate, AVG(EnrollCount) AS AvgEnrollment
FROM (SELECT EnrollmentDate, COUNT(CourseID) AS EnrollCount FROM Enrollment GROUP BY EnrollmentDate, CourseID) AS temp
GROUP BY EnrollmentDate
ORDER BY AvgEnrollment DESC
LIMIT 1;

-- 4. List students with more than 3 enrollments.
SELECT StudentID, COUNT(CourseID) AS CourseCount
FROM Enrollment
GROUP BY StudentID
HAVING CourseCount > 3;

-- 5. List all courses and the number of students enrolled in each.
SELECT CourseID, COUNT(StudentID) AS TotalStudents
FROM Enrollment
GROUP BY CourseID;


Q12 
University Database Management System 
1. Student Management: Store student details such as StudentID, Name, Age, Gender,  Department, and Email. 
2. Course Management: Maintain course details including CourseID, CourseName, Credits, and  Department. 
3. Enrollment System: Allow students to enroll in multiple courses, tracking StudentID,  CourseID, EnrollmentDate, and Grade. 
4. Professor Management: Store professor details like ProfessorID, Name, Department, and  Email 
Write queries for the following questions: 
1. List all courses a specific student is enrolled in (e.g., Pooja) 
2. Identify students who failed more than 2 courses (assuming grade < 2.0 is fail) 3. Count the number of students in each department 
4. Find courses with zero enrollments 
5. Find the most popular course (course with the highest number of enrollments)
-- 1. List all courses a specific student (e.g., Pooja) is enrolled in.
SELECT c.CourseID, c.CourseName 
FROM Enrollment e
JOIN Course c ON e.CourseID = c.CourseID
JOIN Student s ON e.StudentID = s.StudentID
WHERE s.Name = 'Pooja';

-- 2. Identify students who failed more than 2 courses (assuming grade < 2.0 is fail).
SELECT StudentID, COUNT(*) AS FailedCourses
FROM Enrollment
WHERE Grade < 2.0
GROUP BY StudentID
HAVING FailedCourses > 2;

-- 3. Count the number of students in each department.
SELECT Department, COUNT(StudentID) AS StudentCount
FROM Student
GROUP BY Department;

-- 4. Find courses with zero enrollments.
SELECT c.CourseID, c.CourseName
FROM Course c
LEFT JOIN Enrollment e ON c.CourseID = e.CourseID
WHERE e.StudentID IS NULL;

-- 5. Find the most popular course (course with the highest number of enrollments).
SELECT c.CourseID, c.CourseName, COUNT(e.StudentID) AS EnrollmentCount
FROM Enrollment e
JOIN Course c ON e.CourseID = c.CourseID
GROUP BY c.CourseID
ORDER BY EnrollmentCount DESC
LIMIT 1;


Q13 
University Database Management System 
1. Student Management: Store student details such as StudentID, Name, Age, Gender,  Department, and Email. 
2. Course Management: Maintain course details including CourseID, CourseName, Credits, and  Department. 
3. Enrollment System: Allow students to enroll in multiple courses, tracking StudentID,  CourseID, EnrollmentDate, and Grade. 
4. Professor Management: Store professor details like ProfessorID, Name, Department, and  Email 
Write queries for the following questions: 
1. Find students who have not enrolled in any course 
2. Find students who are enrolled in more than 3 courses 
3. Find the average grade of students per course 
4. Retrieve the highest grade in each course 
5. Get the department with the highest number of students
-- 1. Find students who have not enrolled in any course.
SELECT s.StudentID, s.Name
FROM Student s
LEFT JOIN Enrollment e ON s.StudentID = e.StudentID
WHERE e.CourseID IS NULL;

-- 2. Find students who are enrolled in more than 3 courses.
SELECT StudentID, COUNT(CourseID) AS CourseCount
FROM Enrollment
GROUP BY StudentID
HAVING CourseCount > 3;

-- 3. Find the average grade of students per course.
SELECT CourseID, AVG(Grade) AS AvgGrade
FROM Enrollment
GROUP BY CourseID;

-- 4. Retrieve the highest grade in each course.
SELECT CourseID, MAX(Grade) AS HighestGrade
FROM Enrollment
GROUP BY CourseID;

-- 5. Get the department with the highest number of students.
SELECT Department, COUNT(StudentID) AS StudentCount
FROM Student
GROUP BY Department
ORDER BY StudentCount DESC
LIMIT 1;


Q14 
Bank database Management System 
1. Customer (customer_id, name, address, phone, email) 
2. Account (account_id, customer_id, account_type, balance, branch_id) 
3. Branch (branch_id, branch_name, location, manager_id) 
4. Transaction (transaction_id, account_id, transaction_type, amount, transaction_date) 5. Loan (loan_id, customer_id, amount, loan_type, status) 
6. Employee (employee_id, name, position, branch_id, salary) 
Write queries for the following questions: 
1. List all customers and their account details 
2. Find the total balance in each branch 
3. Find customers who have taken loans greater than Rs. 1,00,000 
4. Retrieve transaction history for a specific account (e.g., Account ID: 101) 
5. Find customers who have both a loan and an account 
6. Create a view of high-value customers (balance > 1,00,000)
-- 1. List all customers and their account details.
SELECT c.*, a.* 
FROM Customer c
JOIN Account a ON c.customer_id = a.customer_id;

-- 2. Find the total balance in each branch.
SELECT branch_id, SUM(balance) AS TotalBalance
FROM Account
GROUP BY branch_id;

-- 3. Find customers who have taken loans greater than Rs. 1,00,000.
SELECT c.*
FROM Customer c
JOIN Loan l ON c.customer_id = l.customer_id
WHERE l.amount > 100000;

-- 4. Retrieve transaction history for a specific account (e.g., Account ID: 101).
SELECT * FROM Transaction WHERE account_id = 101;

-- 5. Find customers who have both a loan and an account.
SELECT DISTINCT c.*
FROM Customer c
JOIN Loan l ON c.customer_id = l.customer_id
JOIN Account a ON c.customer_id = a.customer_id;

-- 6. Create a view of high-value customers (balance > 1,00,000).
CREATE VIEW HighValueCustomers AS 
SELECT * FROM Account WHERE balance > 100000;


Q15 
Bank database Management System 
1. Customer (customer_id, name, address, phone, email) 
2. Account (account_id, customer_id, account_type, balance, branch_id) 
3. Branch (branch_id, branch_name, location, manager_id) 
4. Transaction (transaction_id, account_id, transaction_type, amount, transaction_date) 5. Loan (loan_id, customer_id, amount, loan_type, status) 
6. Employee (employee_id, name, position, branch_id, salary) 
Write queries for the following questions: 
1. Find employees working in a specific branch (e.g., Branch ID: 3) 
2. Get the details of the highest transaction made 
3. Find accounts with a balance less than Rs. 5000 
4. Update account balance after a deposit of Rs. 2000 in account ID 105 
5. Delete inactive loan applications (status = 'Rejected') 
6. Calculate the total loan amount per loan type
-- 1. Find employees working in a specific branch (e.g., Branch ID: 3).
SELECT * FROM Employee WHERE branch_id = 3;

-- 2. Get the details of the highest transaction made.
SELECT * FROM Transaction ORDER BY amount DESC LIMIT 1;

-- 3. Find accounts with a balance less than Rs. 5000.
SELECT * FROM Account WHERE balance < 5000;

-- 4. Update account balance after a deposit of Rs. 2000 in account ID 105.
UPDATE Account SET balance = balance + 2000 WHERE account_id = 105;

-- 5. Delete inactive loan applications (status = 'Rejected').
DELETE FROM Loan WHERE status = 'Rejected';

-- 6. Calculate the total loan amount per loan type.
SELECT loan_type, SUM(amount) AS TotalLoanAmount
FROM Loan
GROUP BY loan_type;

